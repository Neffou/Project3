{"ast":null,"code":"var _jsxFileName = \"/home/wild-code-school/Bureau/WCS/projet_3/Yoship-grp/src/components/Contact/Contact/FrenchPhoneField.js\";\nimport React from 'react';\nimport { Input } from 'reactstrap';\n\nclass FrenchPhoneField extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = ({\n      target: {\n        value\n      }\n    }) => {\n      value = value // Remove all non-digits, turn initial 33 into nothing\n      .replace(/\\D+/, '').replace(/^330?/, '0') // Stick to first 10, ignore later digits\n      .slice(0, 10) // Add a space after any 2-digit group followed by more digits\n      .replace(/(\\d{2})(?=\\d)/g, '$1 ');\n      this.setState({\n        value\n      });\n    };\n\n    this.state = {\n      value: ''\n    };\n  } // This method is declared using an arrow function initializer solely\n  // to guarantee its binding, as we cannot use decorators just yet.\n\n\n  render() {\n    const _this$props = this.props,\n          name = _this$props.name,\n          placeholder = _this$props.placeholder,\n          required = _this$props.required;\n    return React.createElement(Input, {\n      autocomplete: \"tel\",\n      name: name,\n      onChange: this.handleChange,\n      placeholder: placeholder,\n      required: required,\n      type: \"tel\",\n      value: this.state.value,\n      bsSize: \"sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n  }\n\n}\n\nFrenchPhoneField.defaultProps = {\n  name: 'tel',\n  placeholder: 'Phone Number',\n  required: false //static propTypes = {\n  //name: PropTypes.string.isRequired,\n  //placeholder: PropTypes.string,\n  //required: PropTypes.bool,\n  //}\n\n};\nexport default FrenchPhoneField;","map":{"version":3,"sources":["/home/wild-code-school/Bureau/WCS/projet_3/Yoship-grp/src/components/Contact/Contact/FrenchPhoneField.js"],"names":["React","Input","FrenchPhoneField","Component","constructor","props","handleChange","target","value","replace","slice","setState","state","render","name","placeholder","required","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,YAAtB;;AAEA,MAAMC,gBAAN,SAA+BF,KAAK,CAACG,SAArC,CAA+C;AAa7CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAOnBC,YAPmB,GAOJ,CAAC;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA;AAAF;AAAV,KAAD,KAA2B;AACxCA,MAAAA,KAAK,GAAGA,KAAK,CACX;AADW,OAEVC,OAFK,CAEG,KAFH,EAEU,EAFV,EAGLA,OAHK,CAGG,OAHH,EAGY,GAHZ,EAIN;AAJM,OAKLC,KALK,CAKC,CALD,EAKI,EALJ,EAMN;AANM,OAOLD,OAPK,CAOG,gBAPH,EAOqB,KAPrB,CAAR;AAQA,WAAKE,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACD,KAjBkB;;AAEjB,SAAKI,KAAL,GAAa;AAAEJ,MAAAA,KAAK,EAAE;AAAT,KAAb;AACD,GAhB4C,CAkB7C;AACA;;;AAaAK,EAAAA,MAAM,GAAG;AAAA,wBACiC,KAAKR,KADtC;AAAA,UACCS,IADD,eACCA,IADD;AAAA,UACOC,WADP,eACOA,WADP;AAAA,UACoBC,QADpB,eACoBA,QADpB;AAEP,WACE,oBAAC,KAAD;AACE,MAAA,YAAY,EAAC,KADf;AAEE,MAAA,IAAI,EAAEF,IAFR;AAGE,MAAA,QAAQ,EAAE,KAAKR,YAHjB;AAIE,MAAA,WAAW,EAAES,WAJf;AAKE,MAAA,QAAQ,EAAEC,QALZ;AAME,MAAA,IAAI,EAAC,KANP;AAOE,MAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWJ,KAPpB;AAQE,MAAA,MAAM,EAAC,IART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWD;;AA7C4C;;AAAzCN,gB,CACGe,Y,GAAe;AACpBH,EAAAA,IAAI,EAAE,KADc;AAEpBC,EAAAA,WAAW,EAAE,cAFO;AAGpBC,EAAAA,QAAQ,EAAE,KAHU,CAMtB;AACE;AACA;AACA;AACF;;AAVsB,C;AA+CxB,eAAed,gBAAf","sourcesContent":["import React from 'react';\nimport { Input } from 'reactstrap';\n\nclass FrenchPhoneField extends React.Component {\n  static defaultProps = {\n    name: 'tel',\n    placeholder: 'Phone Number',\n    required: false,\n  }\n\n  //static propTypes = {\n    //name: PropTypes.string.isRequired,\n    //placeholder: PropTypes.string,\n    //required: PropTypes.bool,\n  //}\n\n  constructor(props) {\n    super(props)\n    this.state = { value: '' }\n  }\n\n  // This method is declared using an arrow function initializer solely\n  // to guarantee its binding, as we cannot use decorators just yet.\n  handleChange = ({ target: { value } }) => {\n    value = value\n      // Remove all non-digits, turn initial 33 into nothing\n      .replace(/\\D+/, '')\n      .replace(/^330?/, '0')\n      // Stick to first 10, ignore later digits\n      .slice(0, 10)\n      // Add a space after any 2-digit group followed by more digits\n      .replace(/(\\d{2})(?=\\d)/g, '$1 ')\n    this.setState({ value })\n  }\n\n  render() {\n    const { name, placeholder, required } = this.props\n    return (\n      <Input \n        autocomplete=\"tel\"\n        name={name}\n        onChange={this.handleChange}\n        placeholder={placeholder}\n        required={required}\n        type=\"tel\"\n        value={this.state.value}\n        bsSize=\"sm\" />\n    )\n  }\n}\n\nexport default FrenchPhoneField;"]},"metadata":{},"sourceType":"module"}